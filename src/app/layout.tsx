import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { ThemeModeScript } from "flowbite-react";
import "./globals.css";
import { SidebarProvider, useSidebarContext } from "@/context/SidebarContext";
import Sidebar from "@/components/Sidebar";
import ExampleSidebar from "@/components/Sidebar";
import classNames from "classnames";
import { PropsWithChildren } from "react";
import ExampleNavbar from "@/components/Navbar";
import ToasterContext from "@/context/ToasterContext";
import KaprodiProvider from "@/context/KaprodiProviders";
import { prisma } from "@/lib/prisma";

const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

const getKaprodi = async () => {
  try {
    const result = await prisma.ketuaProgramStudi.findMany({
      select: {
        id: true,
        nama: true,
      },
      where: {
        nama: {
          not: "dummy",
        },
      }
    });

    const kaprodiDict = result.reduce((acc, curr) => {
      acc[curr.id] = curr.nama;
      return acc;
    }, {} as { [key: string]: string });

    return kaprodiDict;
  } catch (error) {
    console.error("Error getting data:", error);
  }
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const data = await getKaprodi();
  return (
    <html lang="en">
      <head>
        <ThemeModeScript />
      </head>
      <body className={inter.className}>
        <ToasterContext />
        <KaprodiProvider>
          <SidebarProvider>
            <ExampleNavbar listKaprodi={data ?? {}} />
            <div className="flex items-start bg-white dark:bg-gray-900 dark:text-white">
              <ExampleSidebar />
              <MainContent>{children}</MainContent>
            </div>
          </SidebarProvider>
        </KaprodiProvider>
      </body>
    </html>
  );
}

const MainContent = function ({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <main
      className={classNames(
        "overflow-y-auto relative w-full h-full bg-gray-50 dark:bg-gray-900",
        "border-gray-200 bg-white p-4 dark:border-gray-700 dark:bg-gray-800 lg:ml-8"
      )}
    >
      {children}
    </main>
  );
};
